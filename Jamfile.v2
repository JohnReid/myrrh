#
# Copyright John Reid 2008, 2009, 2010, 2011, 2012, 2013
#

import path ;

#
# Rule to add '-d' to debug shared libs
#
rule debug-tag ( name : type ? : property-set )
{
    if "$(type)" = "SHARED_LIB" && "debug" = [ $(property-set).get <variant> ] {
        result = "$(name)-d" ;
    } else {
        result = "" ;
    }
    return "$(result)" ;
}




#
# sub-project Myrrh
#
project Myrrh
    : requirements
        <include>.
        <include>$(BOOST_ROOT)
        <define>BOOST_ALL_NO_LIB # disable boost auto-linking
        <define>BOOST_FILESYSTEM_VERSION=3
        <use>/site-config//numpy
        <tag>@debug-tag
        <toolset>darwin:<linkflags>"-undefined dynamic_lookup"
    : usage-requirements
        <include>.
        <include>$(BOOST_ROOT)
        <define>BOOST_FILESYSTEM_VERSION=3
        <use>/site-config//numpy
    ;




#
# header only library
#
alias myrrh ;



#
# library
#
LIB_SRCS =
    application
    ;
lib myrrh_lib
    :
        src/$(LIB_SRCS).cpp
        /boost/program_options//boost_program_options
        /boost/date_time//boost_date_time
    :
    :
    :
        <include>.
    ;


#
# python library
#
PYLIB_SRCS =
    python/multi_array_to_numpy
    ;
lib myrrh_pylib
    :
        src/$(PYLIB_SRCS).cpp
        /boost/python//boost_python
    :
    :
    :
        <include>.
    ;


#
# Python boost range test
#
python-extension test_python_boost_range
    : # sources
        test/test_python_boost_range.cpp
        /boost/python//boost_python
    ;
explicit test_python_boost_range ;

bpl-test boost-range-test
    :
        python_test/test_boost_range.py
        test_python_boost_range
    ;
explicit boost-range-test ;
TESTS += boost-range-test ;



#
# Multi-array to/from numpy extension
#
python-extension _man
    : # sources
        src/python/man_module.cpp
        myrrh_pylib
    ;
explicit _man ;

bpl-test man-test : _man python_test/test_man.py ;
explicit man-test ;
TESTS += man-test ;


#
# Seqan extension
#
python-extension _seqan
    : # sources
        src/python/seqan_module.cpp
        /boost/python//boost_python
    :
        <use>/site-config//seqan
    ;
explicit _seqan ;

bpl-test seqan-test : python_test/test_seqan.py _seqan ;
explicit seqan-test ;
TESTS += seqan-test ;



#
# Python numpy converter test
#
python-extension test_python_numpy_converter
    : # sources
        test/test_python_numpy_converter.cpp
        /boost/python//boost_python
    ;
explicit test_python_numpy_converter ;

bpl-test numpy-converter-test
    :
        python_test/test_numpy_converter.py
        test_python_numpy_converter
    ;
explicit numpy-converter-test ;
TESTS += numpy-converter-test ;



#
# Tests
#
TEST_SRCS =
    trie
    # bit_set
    # suffix_tree
    chain_iterator
    seqan_adaptors
    store_best_n
    type_names
    ;
for test_src in $(TEST_SRCS)
{
    unit-test test_$(test_src)
        :
            .//myrrh
            test/test_$(test_src).cpp
            /boost/test//boost_unit_test_framework/
            /site-config//seqan
        :
            # <define>BOOST_ALL_NO_LIB=1
            <define>BOOST_TEST_MAIN
            <define>BOOST_TEST_DYN_LINK  # Use dynamically linked boost.test library
            <define>_SCL_SECURE_NO_WARNINGS
            <define>_CRT_SECURE_NO_WARNINGS
            <toolset>msvc:<variant>debug:<testing.launcher>=dbg.bat
        ;
    explicit test_$(test_src) ;
}
alias all-tests : test_$(TEST_SRCS) $(TESTS) ;
explicit all-tests ;


#
# Sandbox
#
for local file in [ glob src/sandbox/*.cpp ]
{
    local target = [ path.basename $(file) ] ;
    exe sandbox_$(target)
        :
            $(file)
        :
            <use>/site-config//seqan
        ;
    explicit sandbox_$(target) ;
    SANDBOX_TARGETS += sandbox_$(target) ;
}
alias sandbox : $(SANDBOX_TARGETS) ;
explicit sandbox ;

