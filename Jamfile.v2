#
# Copyright John Reid 2008, 2009, 2010, 2011
#

import path ;

#
# Rule to add '-d' to debug shared libs
#
rule debug-tag ( name : type ? : property-set )
{
	if "$(type)" = "SHARED_LIB" && "debug" = [ $(property-set).get <variant> ] {
		result = "$(name)-d" ;
	} else {
		result = "" ;
	}
	# echo "In rule tag; name='$(name)'; type='$(type)'; returning: '$(result)'" ;
	return "$(result)" ;
}




#
# sub-project Myrrh
#
project Myrrh
	: requirements
		<include>.
		<include>$(BOOST_ROOT)
		<include>$(BOOST_ITL) 
		<define>BOOST_ALL_NO_LIB # disable boost auto-linking
		<define>BOOST_FILESYSTEM_VERSION=3
		<use>/site-config//numpy
		<tag>@debug-tag
                <toolset>darwin:<linkflags>"-undefined dynamic_lookup"
	: usage-requirements
		<include>.
		<include>$(BOOST_ROOT)
		<include>$(BOOST_ITL) 
		<define>BOOST_FILESYSTEM_VERSION=3
		<use>/site-config//numpy
	;



 
#   
# header only library
#
alias myrrh ;



#
# library
#
LIB_SRCS =
	application
	;
lib myrrh_lib
	: 
		src/$(LIB_SRCS).cpp
		/boost/program_options//boost_program_options
		/boost/date_time//boost_date_time
	;


#
# python library
#
PYLIB_SRCS =
	python/multi_array_to_numpy
	;
lib myrrh_pylib
	: 
		src/$(PYLIB_SRCS).cpp
		/boost/python//boost_python
	;



#
# Tests
#
TEST_SRCS =
	trie
	# bit_set
	# suffix_tree
	chain_iterator
	seqan_adaptors
	store_best_n
	type_names
	;
for test_src in $(TEST_SRCS)
{
	unit-test test_$(test_src)
		:
			.//myrrh
			test/test_$(test_src).cpp
			/boost/test//boost_unit_test_framework/<link>static
			/site-config//seqan
		:
			<define>BOOST_ALL_NO_LIB=1
			<define>_SCL_SECURE_NO_WARNINGS
			<define>_CRT_SECURE_NO_WARNINGS
			<toolset>msvc:<variant>debug:<testing.launcher>=dbg.bat
		;
	explicit test_$(test_src) ;
}
alias all_tests : test_$(TEST_SRCS) ;


#
# Python boost range test
#
python-extension test_python_boost_range
	: # sources
		test/test_python_boost_range.cpp
		/boost/python//boost_python
    ;

bpl-test boost_range_test
	:
		python_test/test_boost_range.py
		test_python_boost_range
	;
explicit boost_range_test ;



#
# Multi-array to/from numpy extension
#
python-extension _man
	: # sources
		src/python/man_module.cpp
		myrrh_pylib
	;

bpl-test man_test : _man python_test/test_man.py ;



#
# Python interval template library extension
#
python-extension _pyitl
	: # sources
		src/python/pyitl_module.cpp
		/boost/python//boost_python
	:
		<variant>release:<dll-path>'$ORIGIN/lib'
		<variant>debug:<dll-path>'$ORIGIN/lib/debug'
	;

bpl-test pyitl_test
	:
		python_test/test_pyitl.py
		_pyitl
	;

install install_pyitl_pyd
	:
		_pyitl 
	:
		<location>Python
		<install-dependencies>off
	;
	
BIN_DIR = ../../bin ;
install install_pyitl_so
	:
		/boost/python//boost_python
	:
		<variant>release:<location>Python/lib
		<variant>debug:<location>Python/lib/debug
	;

alias install_pyitl : install_pyitl_pyd install_pyitl_so ;


#
# Seqan extension
#
python-extension _seqan
	: # sources
		src/python/seqan_module.cpp
		/boost/python//boost_python
	:
		<use>/site-config//seqan
	;

bpl-test seqan_test : python_test/test_seqan.py _seqan ;



#
# Python numpy converter test
#
python-extension test_python_numpy_converter
	: # sources
		test/test_python_numpy_converter.cpp
		/boost/python//boost_python
    ;

bpl-test numpy_converter_test
	:
		python_test/test_numpy_converter.py
		test_python_numpy_converter
	;


#
# Sandbox
#
for local file in [ glob src/sandbox/*.cpp ]
{
	local target = [ path.basename $(file) ] ;
	exe sandbox_$(target)
		:
			$(file)
		:
			<include>$(SEQAN_PATH)
		;
	SANDBOX_TARGETS += sandbox_$(target) ;
}
alias sandbox : $(SANDBOX_TARGETS) ;


